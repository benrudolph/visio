
.signin.session-container
.signup.session-container

%canvas#testCanvas

:javascript
  $(document).ready(function() {

    Visio.router = new Visio.Routers.SplashRouter();
    Backbone.history.start();

    var canvas;
    var context;
    var proton;
    var renderer;
    var emitter;
    var stats;
    var index;
    var randomBehaviour;
    var gravity;
    var zone;
    var rootIndex = 0;
    var mouseObj;
    var texts = ['12', '12,400,321', '2'];
    var zones = []
    var images = [];
    var loadCount = 0;

    Main();
    function Main() {
      canvas = document.getElementById("testCanvas");
      canvas.width = 1003;
      canvas.height = 610;
      context = canvas.getContext('2d');
      context.globalCompositeOperation = "lighter";

      var rect = new Proton.Rectangle((canvas.width - canvas.width) / 2, (canvas.height - canvas.height) / 2, canvas.width, canvas.height);

      context.font = "150px helvetica"
      context.fillStyle = "#FF0000";

      _.each(texts, function(text) {
        context.fillText(text, 100, 280);
        var imagedata = context.getImageData(rect.x, rect.y, rect.width, rect.height);
        zones.push(new Proton.ImageZone(imagedata, rect.x, rect.y + 50))
        context.clearRect(0, 0, canvas.width, canvas.height);
      })

      createProton(rect);
      tick();
    }


    function createProton(rect) {
      proton = new Proton;
      emitter = new Proton.Emitter();
      //setRate
      emitter.rate = new Proton.Rate(new Proton.Span(2000), new Proton.Span(0.1));
      //addInitialize
      emitter.addInitialize(new Proton.Position(new Proton.PointZone(0, 0)));

      // How large is the point
      emitter.addInitialize(new Proton.Radius(1));


      emitter.addInitialize(new Proton.P(zones[rootIndex]));

      mouseObj = {
        x : 1003 / 2,
        y : 610 / 2
      };
      attractionBehaviour = new Proton.Attraction(mouseObj, 0, 0);

      randomBehaviour = new Proton.RandomDrift(0, 0, .05);
      gravity = new Proton.GravityWell({
        x : canvas.width / 2,
        y : canvas.height / 2
      }, 0, 0);

      emitter.addBehaviour(customToZoneBehaviour(zones))
      emitter.addBehaviour(new Proton.Color(['#000000']));
      emitter.addBehaviour(attractionBehaviour);
      //emitter.addBehaviour(customScaleBehaviour());
      //emitter.addBehaviour(gravity);
      randomBehaviour.reset(30, 30, 0.001);
      emitter.addBehaviour(randomBehaviour);
      // Choose colors of dots
      //emitter.addBehaviour(new Proton.CrossZone(new Proton.RectZone(0, 0, canvas.width, canvas.height), 'bound'));

      emitter.emit('once');
      //add emitter
      proton.addEmitter(emitter);

      //canvas renderer
      renderer = new Proton.Renderer('pixel', proton, canvas);
      renderer.start();

      //debug
      //Proton.Debug.drawEmitter(proton, canvas, emitter);

      index = 0;
      canvas.addEventListener('click', function(e) {
        console.log('mousedown')
        rootIndex ++;
        //randomBehaviour.reset(30, 30, 0.001);
        //if (index % 3 == 1) {
        //  randomBehaviour.reset(2, 0, .2);
        //  gravity.reset(1.5);
        //} else if (index % 3 == 2) {
        //  randomBehaviour.reset(50, 50, .1);
        //  gravity.reset(0);
        //} else {
        //  randomBehaviour.reset(2, 2, .2);
        //  gravity.reset(0);
        //}
      });
      canvas.addEventListener('mousemove', function(e) {

        var _x, _y;
        if (e.layerX || e.layerX == 0) {
          _x = e.layerX;
          _y = e.layerY;
        } else if (e.offsetX || e.offsetX == 0) {
          _x = e.offsetX;
          _y = e.offsetY;
        }

        mouseObj.x = _x;
        mouseObj.y = _y;
        attractionBehaviour.reset(mouseObj, 10, 1200)
      });
    }

    function getColor(posArr) {
      var arr = [];
      for (var i = 0; i < posArr.length; i++) {
        arr.push(zones[rootIndex].getColor(posArr[i].x, posArr[i].y));
      }
      return arr;
    }


    function customToZoneBehaviour(zones) {
      return {
        initialize : function(particle) {
          particle.R = Math.random() * 10;
          particle.Angle = Math.random() * Math.PI * 2;
          particle.speed = Math.random() * (-2) + 1;
          particle.zones = _.map(zones, function(z) { return z.getPosition().clone(); })

          //[zone1.getPosition().clone(), zone2.getPosition().clone()];
          particle.colors = getColor(particle.zones);
        },

        applyBehaviour : function(particle) {
          if (rootIndex % 2 != 0) {
            particle.v.clear();
            particle.Angle += particle.speed;
            var index = (rootIndex % 4 + 1) / 2 - 1;
            var x = particle.zones[rootIndex % particle.zones.length].x + particle.R * Math.cos(particle.Angle);
            var y = particle.zones[rootIndex % particle.zones.length].y + particle.R * Math.sin(particle.Angle);
            particle.p.x += (x - particle.p.x) * 0.05;
            particle.p.y += (y - particle.p.y) * 0.05;
            particle.transform.rgb.r = particle.colors[index].r;
            particle.transform.rgb.g = particle.colors[index].g;
            particle.transform.rgb.b = particle.colors[index].b;
          }
        }
      }
    }

    function tick() {
      requestAnimationFrame(tick);
      proton.update();
    }

  });
